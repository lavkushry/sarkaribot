# Generated by Django 5.2.4 on 2025-08-01 11:05

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sources', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('name', models.CharField(help_text="Category name (e.g., 'Latest Jobs', 'Admit Card')", max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly slug', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('position', models.PositiveIntegerField(default=0, help_text='Display order position')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is active')),
                ('icon', models.CharField(blank=True, help_text='Icon class name for display', max_length=50)),
            ],
            options={
                'verbose_name': 'Job Category',
                'verbose_name_plural': 'Job Categories',
                'ordering': ['position', 'name'],
            },
        ),
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('title', models.CharField(help_text='Job posting title', max_length=255)),
                ('description', models.TextField(help_text='Detailed job description')),
                ('short_description', models.TextField(blank=True, help_text='Brief summary for listings', max_length=500)),
                ('department', models.CharField(blank=True, help_text='Government department/ministry', max_length=200)),
                ('total_posts', models.PositiveIntegerField(blank=True, help_text='Total number of available positions', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('min_age', models.PositiveIntegerField(blank=True, help_text='Minimum age requirement', null=True, validators=[django.core.validators.MinValueValidator(16), django.core.validators.MaxValueValidator(70)])),
                ('max_age', models.PositiveIntegerField(blank=True, help_text='Maximum age requirement', null=True, validators=[django.core.validators.MinValueValidator(16), django.core.validators.MaxValueValidator(70)])),
                ('qualification', models.TextField(blank=True, help_text='Educational qualification requirements')),
                ('notification_date', models.DateField(blank=True, help_text='Date when notification was published', null=True)),
                ('application_start_date', models.DateField(blank=True, help_text='Application start date', null=True)),
                ('application_end_date', models.DateField(blank=True, help_text='Application deadline', null=True)),
                ('exam_date', models.DateField(blank=True, help_text='Examination date', null=True)),
                ('application_fee', models.DecimalField(blank=True, decimal_places=2, help_text='Application fee amount', max_digits=10, null=True)),
                ('salary_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum salary/pay scale', max_digits=12, null=True)),
                ('salary_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum salary/pay scale', max_digits=12, null=True)),
                ('application_link', models.URLField(blank=True, help_text='Direct application link', validators=[django.core.validators.URLValidator()])),
                ('notification_pdf', models.URLField(blank=True, help_text='Official notification PDF link', validators=[django.core.validators.URLValidator()])),
                ('source_url', models.URLField(help_text='Original source URL', validators=[django.core.validators.URLValidator()])),
                ('status', models.CharField(choices=[('announced', 'Latest Job'), ('admit_card', 'Admit Card'), ('answer_key', 'Answer Key'), ('result', 'Result'), ('archived', 'Archived')], default='announced', help_text='Current lifecycle status', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', help_text='Display priority', max_length=10)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this job should be featured')),
                ('slug', models.SlugField(help_text='URL-friendly slug', max_length=255, unique=True)),
                ('seo_title', models.CharField(blank=True, help_text='SEO optimized title', max_length=60)),
                ('seo_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('keywords', models.TextField(blank=True, help_text='Comma-separated keywords for SEO')),
                ('structured_data', models.JSONField(default=dict, help_text='JSON-LD structured data for search engines')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of page views')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number for tracking updates')),
                ('published_at', models.DateTimeField(blank=True, help_text='When the job was published to the portal', null=True)),
                ('indexed_at', models.DateTimeField(blank=True, help_text='When the job was indexed by search engines', null=True)),
                ('category', models.ForeignKey(help_text='Current lifecycle category', on_delete=django.db.models.deletion.CASCADE, related_name='job_postings', to='jobs.jobcategory')),
                ('source', models.ForeignKey(help_text='Government source that published this job', on_delete=django.db.models.deletion.CASCADE, related_name='job_postings', to='sources.governmentsource')),
            ],
            options={
                'verbose_name': 'Job Posting',
                'verbose_name_plural': 'Job Postings',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('milestone_type', models.CharField(choices=[('notification', 'Notification Published'), ('application_start', 'Applications Started'), ('application_end', 'Applications Closed'), ('admit_card', 'Admit Card Released'), ('exam_conducted', 'Exam Conducted'), ('answer_key', 'Answer Key Released'), ('result', 'Result Published'), ('interview', 'Interview Scheduled'), ('final_result', 'Final Result'), ('document_verification', 'Document Verification')], help_text='Type of milestone', max_length=30)),
                ('milestone_date', models.DateField(help_text='Date when this milestone occurred')),
                ('title', models.CharField(help_text='Milestone title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the milestone')),
                ('asset_url', models.URLField(blank=True, help_text='URL to related document/asset', validators=[django.core.validators.URLValidator()])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this milestone is currently active')),
                ('job_posting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='jobs.jobposting')),
            ],
            options={
                'verbose_name': 'Job Milestone',
                'verbose_name_plural': 'Job Milestones',
                'ordering': ['-milestone_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('ip_address', models.GenericIPAddressField(help_text='Visitor IP address')),
                ('user_agent', models.TextField(help_text='Browser user agent string')),
                ('referrer', models.URLField(blank=True, help_text='Referrer URL', null=True)),
                ('session_key', models.CharField(blank=True, help_text='Session identifier', max_length=40)),
                ('job_posting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='jobs.jobposting')),
            ],
            options={
                'verbose_name': 'Job View',
                'verbose_name_plural': 'Job Views',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['status', 'published_at'], name='jobs_jobpos_status_cef47a_idx'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['slug'], name='jobs_jobpos_slug_3a76ff_idx'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['source', 'status'], name='jobs_jobpos_source__b8a762_idx'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['category', 'status', '-published_at'], name='jobs_jobpos_categor_529308_idx'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['application_end_date'], name='jobs_jobpos_applica_876a20_idx'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['is_featured', 'priority', '-published_at'], name='jobs_jobpos_is_feat_997755_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmilestone',
            index=models.Index(fields=['job_posting', 'milestone_date'], name='jobs_jobmil_job_pos_ee6ce7_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmilestone',
            index=models.Index(fields=['milestone_type'], name='jobs_jobmil_milesto_601453_idx'),
        ),
        migrations.AddIndex(
            model_name='jobview',
            index=models.Index(fields=['job_posting', 'created_at'], name='jobs_jobvie_job_pos_6807d1_idx'),
        ),
        migrations.AddIndex(
            model_name='jobview',
            index=models.Index(fields=['ip_address'], name='jobs_jobvie_ip_addr_b1179c_idx'),
        ),
        migrations.AddIndex(
            model_name='jobview',
            index=models.Index(fields=['created_at'], name='jobs_jobvie_created_ac8cb1_idx'),
        ),
    ]
