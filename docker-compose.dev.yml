# Docker Compose for SarkariBot Development Environment
# Run with: docker compose -f docker-compose.dev.yml up

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: sarkaribot_db_dev
    environment:
      POSTGRES_DB: sarkaribot_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - sarkaribot_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sarkaribot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: sarkaribot_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - sarkaribot_dev_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Django Backend
  backend:
    build:
      context: ./sarkaribot/backend
      dockerfile: ../docker/Dockerfile.dev
    container_name: sarkaribot_backend_dev
    volumes:
      - ./sarkaribot/backend:/app
      - media_dev_data:/app/media
      - static_dev_data:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DB_NAME=sarkaribot_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - CACHE_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sarkaribot_dev_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python manage.py migrate &&
        echo 'Database migration completed' &&
        python manage.py collectstatic --noinput &&
        echo 'Static files collected' &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker
  celery_worker:
    build:
      context: ./sarkaribot/backend
      dockerfile: ../docker/Dockerfile.dev
    container_name: sarkaribot_celery_worker_dev
    volumes:
      - ./sarkaribot/backend:/app
      - media_dev_data:/app/media
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DB_NAME=sarkaribot_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - CACHE_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - sarkaribot_dev_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting Celery worker...' &&
        celery -A config worker --loglevel=info --concurrency=2
      "

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./sarkaribot/backend
      dockerfile: ../docker/Dockerfile.dev
    container_name: sarkaribot_celery_beat_dev
    volumes:
      - ./sarkaribot/backend:/app
      - celery_beat_dev_data:/app/celerybeat-schedule
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DB_NAME=sarkaribot_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - CACHE_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - sarkaribot_dev_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting Celery beat scheduler...' &&
        celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "

  # React Frontend
  frontend:
    build:
      context: ./sarkaribot/frontend
      dockerfile: ../docker/Dockerfile.frontend.dev
    container_name: sarkaribot_frontend_dev
    volumes:
      - ./sarkaribot/frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_SITE_NAME=SarkariBot
      - WATCHPACK_POLLING=true  # Enable polling for file changes in Docker
      - FAST_REFRESH=true
    networks:
      - sarkaribot_dev_network
    restart: unless-stopped
    stdin_open: true  # Keep STDIN open for React
    tty: true         # Allocate a pseudo-TTY

  # Database Administration (PgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sarkaribot_pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@sarkaribot.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - sarkaribot_dev_network
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - tools  # Optional service, run with --profile tools

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  media_dev_data:
    driver: local
  static_dev_data:
    driver: local
  celery_beat_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

networks:
  sarkaribot_dev_network:
    driver: bridge
    name: sarkaribot_dev_network