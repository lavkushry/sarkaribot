name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Backend testing
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sarkaribot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
    
    - name: Set up environment variables
      run: |
        cd backend
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sarkaribot_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        echo "DEBUG=True" >> .env.test
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env.test
    
    - name: Run Django migrations
      run: |
        cd backend
        python manage.py migrate --settings=config.settings_test
    
    - name: Run backend tests
      run: |
        cd backend
        python manage.py test --settings=config.settings_test --verbosity=2
    
    - name: Run code linting
      run: |
        cd backend
        flake8 .
        black . --check
        isort . --check-only
    
    - name: Generate coverage report
      run: |
        cd backend
        coverage run --source='.' manage.py test --settings=config.settings_test
        coverage xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend testing
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit (Python)
      run: |
        cd backend
        python -m pip install safety bandit
        safety check -r requirements/base.txt
        bandit -r . -x tests/
    
    - name: Run security audit (Node.js)
      run: |
        cd frontend
        npm audit --audit-level moderate

  # Docker build test
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        docker build -f docker/Dockerfile.dev -t sarkaribot-backend:test .
    
    - name: Build frontend Docker image
      run: |
        docker build -f docker/Dockerfile.frontend -t sarkaribot-frontend:test ./frontend
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.dev.yml up -d
        sleep 30  # Wait for services to start
    
    - name: Run integration tests
      run: |
        python scripts/test_integration.py
    
    - name: Stop services
      run: |
        docker-compose -f docker-compose.dev.yml down
