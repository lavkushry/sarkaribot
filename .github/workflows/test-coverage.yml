name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sarkaribot
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sarkaribot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./sarkaribot/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
    
    - name: Run Django checks
      working-directory: ./sarkaribot/backend
      env:
        DJANGO_SETTINGS_MODULE: config.settings.testing
        DATABASE_URL: postgres://sarkaribot:test_password@localhost:5432/sarkaribot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py check --deploy
    
    - name: Run migrations
      working-directory: ./sarkaribot/backend
      env:
        DJANGO_SETTINGS_MODULE: config.settings.testing
        DATABASE_URL: postgres://sarkaribot:test_password@localhost:5432/sarkaribot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py migrate --noinput
    
    - name: Run backend tests with coverage
      working-directory: ./sarkaribot/backend
      env:
        DJANGO_SETTINGS_MODULE: config.settings.testing
        DATABASE_URL: postgres://sarkaribot:test_password@localhost:5432/sarkaribot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest --cov=apps --cov-report=xml --cov-report=html --cov-fail-under=85 -v
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sarkaribot/backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: sarkaribot/frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./sarkaribot/frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./sarkaribot/frontend
      run: npm run lint
    
    - name: Run frontend tests with coverage
      working-directory: ./sarkaribot/frontend
      run: npm run test:coverage
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sarkaribot/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sarkaribot
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sarkaribot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: sarkaribot/frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./sarkaribot/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
    
    - name: Install frontend dependencies
      working-directory: ./sarkaribot/frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./sarkaribot/frontend
      run: npm run build
    
    - name: Run critical path tests
      working-directory: ./sarkaribot/backend
      env:
        DJANGO_SETTINGS_MODULE: config.settings.testing
        DATABASE_URL: postgres://sarkaribot:test_password@localhost:5432/sarkaribot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/test_critical_paths.py -v --cov-fail-under=95 -m critical
    
    - name: Run integration tests
      working-directory: ./sarkaribot/backend
      env:
        DJANGO_SETTINGS_MODULE: config.settings.testing
        DATABASE_URL: postgres://sarkaribot:test_password@localhost:5432/sarkaribot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest -v -m integration

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install security testing dependencies
      working-directory: ./sarkaribot/backend
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security tests
      working-directory: ./sarkaribot/backend
      run: |
        bandit -r apps/ -f json -o bandit-report.json || true
        bandit -r apps/ -ll
    
    - name: Run Safety dependency checks
      working-directory: ./sarkaribot/backend
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          sarkaribot/backend/bandit-report.json
          sarkaribot/backend/safety-report.json

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sarkaribot
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sarkaribot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      working-directory: ./sarkaribot/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        pip install locust
    
    - name: Run performance tests
      working-directory: ./sarkaribot/backend
      env:
        DJANGO_SETTINGS_MODULE: config.settings.testing
        DATABASE_URL: postgres://sarkaribot:test_password@localhost:5432/sarkaribot_test
      run: |
        python manage.py migrate --noinput
        python manage.py loaddata test_fixtures.json || echo "No test fixtures found"
        # Add performance test command here
        echo "Performance tests would run here"